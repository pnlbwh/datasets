#!/usr/bin/env python
import sys
from plumbum import cli, local, SshMachine, FG, ProcessExecutionError
from plumbum.cmd import ssh, rsync
import yaml

USER = "re098"
GATEWAY = "ssh.research.partners.org"


def sync(dataset, server, remoteDir, caseids):
    with SshMachine(GATEWAY, user=USER, keyfile="~/.ssh/id_rsa.pub") as rem:
        ssh = rem['ssh']
        printFilesCmd = "cd {}; printYamlPaths.py {}".format(remoteDir,
                                                          ' '.join(caseids))
        remoteFiles = (ssh(server, printFilesCmd)).splitlines()

    nhdrs = filter(lambda x: x.endswith('nhdr'), remoteFiles)
    rawgzs = map(lambda x: x[:-4]+'raw.gz', nhdrs)
    rsyncFiles = map(
        lambda x: '{}/./{}'.format(remoteDir, x),
        remoteFiles + rawgzs + ['paths.yml'])

    print("Will rsync these files:")
    print(rsyncFiles)

    for f in rsyncFiles:
        try:
            rsync[
                '-Ravz', '-e',
                'ssh -A -t {}@{} ssh -A -t {}'.format(
                    USER, GATEWAY,server), ':{}'.format(f), dataset] & FG
        except ProcessExecutionError as e:
            print("Failed to download '{}'".format(f))


class App(cli.Application):
    """Usage:
    ./sync int
    ./sync u01 [case1 case2 ...]
    ./sync -f pnl.yml int
    """

    yml = cli.SwitchAttr(['-f'], default='erisone.yml', help='Yaml file with remote paths')

    def main(self, dataset, *caseids):
        with open(self.yml, 'r') as f:
            remoteDirs = yaml.load(f)
            if dataset not in remoteDirs.keys():
                print("Add '{}' to 'datasets.yml' first.".format(dataset))
                sys.exit(1)
            remoteDir = local.path(remoteDirs[dataset])
            server = remoteDirs['server']
        localDir = local.path(dataset)
        if not localDir.exists():
            localDir.mkdir()
            local.path('envrc').copy(localDir / '.envrc')
        sync(dataset, server, remoteDir, caseids)


if __name__ == '__main__':
    App.run()
